---
import type { MarkdownInstance } from "astro";
import BlogPost from "../../components/BlogPost.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { PostInfo } from "../../types/PostInfo";

/**
 * This function generate one static route of type "/tags/__route__" for each unique tag in the blog posts
 * Each created route will have the 'tag' parameter inside the url that corresponds to the name of the tag.
 * Each route will have a prop called 'posts' which is the array of blog posts that have that tag.
 */
export async function getStaticPaths() {
  const allPosts: MarkdownInstance<PostInfo>[] =
    await Astro.glob<PostInfo>("../posts/*.md");
  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags.includes(tag),
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {
      posts.map((post) => (
        <BlogPost url={post.url!} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
